com.google.android.apps.analytics.AdHitIdGenerator -> com.google.android.apps.analytics.f:
    boolean adMobSdkInstalled -> a
    int getAdHitId() -> a
com.google.android.apps.analytics.AdMobInfo -> com.google.android.apps.analytics.v:
    com.google.android.apps.analytics.AdMobInfo INSTANCE -> a
    int adHitId -> b
    java.util.Random random -> c
    com.google.android.apps.analytics.AdMobInfo getInstance() -> a
    int generateAdHitId() -> b
com.google.android.apps.analytics.AnalyticsParameterEncoder -> com.google.android.apps.analytics.t:
    java.lang.String encode(java.lang.String,java.lang.String) -> a
com.google.android.apps.analytics.AnalyticsReceiver -> com.google.android.apps.analytics.AnalyticsReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.android.apps.analytics.CustomVariable -> com.google.android.apps.analytics.x:
    int scope -> a
    java.lang.String name -> b
    java.lang.String value -> c
    int index -> d
    int getScope() -> a
    java.lang.String getName() -> b
    java.lang.String getValue() -> c
    int getIndex() -> d
com.google.android.apps.analytics.CustomVariableBuffer -> com.google.android.apps.analytics.k:
    com.google.android.apps.analytics.CustomVariable[] customVariables -> a
    boolean isIndexAvailable(int) -> a
    void setCustomVariable(com.google.android.apps.analytics.CustomVariable) -> a
    com.google.android.apps.analytics.CustomVariable getCustomVariableAt(int) -> b
    com.google.android.apps.analytics.CustomVariable[] getCustomVariableArray() -> a
    void throwOnInvalidIndex(int) -> d
    boolean hasCustomVariables() -> b
    void clearCustomVariableAt(int) -> c
com.google.android.apps.analytics.Dispatcher -> com.google.android.apps.analytics.e:
    void dispatchHits(com.google.android.apps.analytics.Hit[]) -> a
    void init(com.google.android.apps.analytics.Dispatcher$Callbacks) -> a
    void stop() -> b
    void setDryRun(boolean) -> a
com.google.android.apps.analytics.Dispatcher$Callbacks -> com.google.android.apps.analytics.ab:
    void hitDispatched(long) -> a
    void dispatchFinished() -> a
com.google.android.apps.analytics.Event -> com.google.android.apps.analytics.n:
    long eventId -> i
    java.lang.String accountId -> a
    int randomVal -> j
    int adHitId -> k
    int timestampFirst -> l
    int timestampPrevious -> m
    int timestampCurrent -> n
    int visits -> o
    int userId -> p
    boolean anonymizeIp -> q
    boolean useServerTime -> r
    java.lang.String category -> b
    java.lang.String action -> c
    java.lang.String label -> d
    int value -> e
    int screenWidth -> f
    int screenHeight -> g
    com.google.android.apps.analytics.CustomVariableBuffer customVariableBuffer -> h
    com.google.android.apps.analytics.Transaction transaction -> s
    com.google.android.apps.analytics.Item item -> t
    void setRandomVal(int) -> a
    int getRandomVal() -> a
    void setAdHitId(int) -> b
    int getAdHitId() -> b
    void setTimestampFirst(int) -> c
    int getTimestampFirst() -> c
    void setTimestampPrevious(int) -> d
    int getTimestampPrevious() -> d
    void setTimestampCurrent(int) -> e
    int getTimestampCurrent() -> e
    void setVisits(int) -> f
    int getVisits() -> f
    void setUserId(int) -> g
    int getUserId() -> g
    void setAnonymizeIp(boolean) -> a
    boolean getAnonymizeIp() -> h
    void setUseServerTime(boolean) -> b
    boolean getUseServerTime() -> i
    java.lang.String toString() -> toString
    com.google.android.apps.analytics.Transaction getTransaction() -> j
    void setTransaction(com.google.android.apps.analytics.Transaction) -> a
    com.google.android.apps.analytics.Item getItem() -> k
    void setItem(com.google.android.apps.analytics.Item) -> a
    boolean isSessionInitialized() -> l
com.google.android.apps.analytics.GoogleAnalyticsTracker -> com.google.android.apps.analytics.h:
    com.google.android.apps.analytics.GoogleAnalyticsTracker instance -> a
    boolean debug -> b
    boolean dryRun -> c
    boolean anonymizeIp -> d
    boolean useServerTime -> e
    int sampleRate -> f
    java.lang.String accountId -> g
    android.content.Context parent -> h
    android.net.ConnectivityManager connectivityManager -> i
    java.lang.String userAgentProduct -> j
    java.lang.String userAgentVersion -> k
    int dispatchPeriod -> l
    com.google.android.apps.analytics.HitStore hitStore -> m
    com.google.android.apps.analytics.Dispatcher dispatcher -> n
    boolean powerSaveMode -> o
    boolean dispatcherIsBusy -> p
    com.google.android.apps.analytics.AdHitIdGenerator adHitIdGenerator -> q
    com.google.android.apps.analytics.CustomVariableBuffer customVariableBuffer -> r
    java.util.Map transactionMap -> s
    java.util.Map itemMap -> t
    android.os.Handler handler -> u
    java.lang.Runnable dispatchRunner -> v
    com.google.android.apps.analytics.GoogleAnalyticsTracker getInstance() -> a
    void startNewSession(java.lang.String,int,android.content.Context) -> a
    void trackPageView(java.lang.String) -> a
    void maybeScheduleNextDispatch() -> f
    void cancelPendingDispatches() -> g
    boolean dispatch() -> b
    void dispatchFinished() -> c
    void stopSession() -> d
    boolean getDebug() -> e
    android.os.Handler access$000(com.google.android.apps.analytics.GoogleAnalyticsTracker) -> a
    com.google.android.apps.analytics.HitStore access$100(com.google.android.apps.analytics.GoogleAnalyticsTracker) -> b
com.google.android.apps.analytics.GoogleAnalyticsTracker$1 -> com.google.android.apps.analytics.y:
    com.google.android.apps.analytics.GoogleAnalyticsTracker this$0 -> a
    void run() -> run
com.google.android.apps.analytics.GoogleAnalyticsTracker$DispatcherCallbacks -> com.google.android.apps.analytics.c:
    com.google.android.apps.analytics.GoogleAnalyticsTracker this$0 -> a
    void dispatchFinished() -> a
    void hitDispatched(long) -> a
com.google.android.apps.analytics.GoogleAnalyticsTracker$DispatcherCallbacks$1 -> com.google.android.apps.analytics.ac:
    com.google.android.apps.analytics.GoogleAnalyticsTracker$DispatcherCallbacks this$1 -> a
    void run() -> run
com.google.android.apps.analytics.Hit -> com.google.android.apps.analytics.a:
    java.lang.String hitString -> a
    long hitId -> b
com.google.android.apps.analytics.HitBuilder -> com.google.android.apps.analytics.l:
    void appendStringValue(java.lang.StringBuilder,java.lang.String,java.lang.String) -> a
    void appendCurrencyValue(java.lang.StringBuilder,java.lang.String,double) -> a
    java.lang.String constructHitRequestPath(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> a
    java.lang.String getCustomVariableParams(com.google.android.apps.analytics.Event) -> a
    void createX10Project(com.google.android.apps.analytics.CustomVariable[],java.lang.StringBuilder,int) -> a
    java.lang.String x10Escape(java.lang.String) -> a
    java.lang.String getEscapedCookieString(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer) -> b
com.google.android.apps.analytics.HitStore -> com.google.android.apps.analytics.g:
    void putEvent(com.google.android.apps.analytics.Event) -> a
    com.google.android.apps.analytics.Hit[] peekHits() -> a
    void deleteHit(long) -> a
    int getNumStoredHits() -> b
    boolean setReferrer(java.lang.String) -> a
    void startNewVisit() -> c
    void setAnonymizeIp(boolean) -> a
    void setSampleRate(int) -> a
com.google.android.apps.analytics.Item -> com.google.android.apps.analytics.m:
    java.lang.String orderId -> a
    java.lang.String itemSKU -> b
    java.lang.String itemName -> c
    java.lang.String itemCategory -> d
    double itemPrice -> e
    long itemCount -> f
    java.lang.String getOrderId() -> a
    java.lang.String getItemSKU() -> b
    java.lang.String getItemName() -> c
    java.lang.String getItemCategory() -> d
    double getItemPrice() -> e
    long getItemCount() -> f
com.google.android.apps.analytics.Item$Builder -> com.google.android.apps.analytics.d:
    java.lang.String orderId -> a
    java.lang.String itemSKU -> b
    double itemPrice -> c
    long itemCount -> d
    java.lang.String itemName -> e
    java.lang.String itemCategory -> f
    com.google.android.apps.analytics.Item$Builder setItemName(java.lang.String) -> a
    com.google.android.apps.analytics.Item$Builder setItemCategory(java.lang.String) -> b
    java.lang.String access$000(com.google.android.apps.analytics.Item$Builder) -> a
    java.lang.String access$100(com.google.android.apps.analytics.Item$Builder) -> b
    double access$200(com.google.android.apps.analytics.Item$Builder) -> c
    long access$300(com.google.android.apps.analytics.Item$Builder) -> d
    java.lang.String access$400(com.google.android.apps.analytics.Item$Builder) -> e
    java.lang.String access$500(com.google.android.apps.analytics.Item$Builder) -> f
com.google.android.apps.analytics.NetworkDispatcher -> com.google.android.apps.analytics.b:
    java.lang.String userAgent -> a
    org.apache.http.HttpHost googleAnalyticsHost -> b
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread dispatcherThread -> c
    boolean dryRun -> d
    void init(com.google.android.apps.analytics.Dispatcher$Callbacks) -> a
    void dispatchHits(com.google.android.apps.analytics.Hit[]) -> a
    void setDryRun(boolean) -> a
    boolean isDryRun() -> a
    void stop() -> b
    org.apache.http.HttpHost access$200(com.google.android.apps.analytics.NetworkDispatcher) -> a
com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread -> com.google.android.apps.analytics.r:
    android.os.Handler handlerExecuteOnDispatcherThread -> a
    com.google.android.apps.analytics.PipelinedRequester pipelinedRequester -> b
    java.lang.String userAgent -> c
    int lastStatusCode -> d
    int maxEventsPerRequest -> e
    long retryInterval -> f
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask currentTask -> g
    com.google.android.apps.analytics.Dispatcher$Callbacks callbacks -> h
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$RequesterCallbacks requesterCallBacks -> i
    com.google.android.apps.analytics.NetworkDispatcher parent -> j
    void onLooperPrepared() -> onLooperPrepared
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask access$402(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask) -> a
    int access$500(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> a
    long access$600(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> b
    long access$630(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,long) -> a
    long access$602(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,long) -> b
    com.google.android.apps.analytics.NetworkDispatcher access$700(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> c
    com.google.android.apps.analytics.PipelinedRequester access$800(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> d
    com.google.android.apps.analytics.Dispatcher$Callbacks access$900(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> e
    int access$1000(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> f
    java.lang.String access$1100(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> g
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$RequesterCallbacks access$1200(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> h
    int access$1002(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,int) -> a
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask access$400(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread) -> i
    int access$502(com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread,int) -> b
com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask -> com.google.android.apps.analytics.p:
    java.util.LinkedList hits -> a
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread this$0 -> b
    void run() -> run
    com.google.android.apps.analytics.Hit removeNextHit() -> a
com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$RequesterCallbacks -> com.google.android.apps.analytics.s:
    com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread this$0 -> a
    void pipelineModeChanged(boolean) -> a
    void requestSent() -> a
    void serverError(int) -> a
com.google.android.apps.analytics.PersistentHitStore -> com.google.android.apps.analytics.q:
    com.google.android.apps.analytics.PersistentHitStore$DataBaseHelper databaseHelper -> a
    int storeId -> b
    long timestampFirst -> c
    long timestampPrevious -> d
    long timestampCurrent -> e
    int visits -> f
    int numStoredHits -> g
    boolean sessionStarted -> h
    boolean useStoredVisitorVars -> i
    boolean anonymizeIp -> j
    int sampleRate -> k
    java.util.Random random -> l
    com.google.android.apps.analytics.CustomVariableBuffer visitorCVCache -> m
    java.lang.String CREATE_EVENTS_TABLE -> n
    java.lang.String CREATE_SESSION_TABLE -> o
    java.lang.String CREATE_CUSTOM_VARIABLES_TABLE -> p
    java.lang.String CREATE_CUSTOM_VAR_CACHE_TABLE -> q
    java.lang.String CREATE_TRANSACTION_EVENTS_TABLE -> r
    java.lang.String CREATE_ITEM_EVENTS_TABLE -> s
    java.lang.String CREATE_HITS_TABLE -> t
    void deleteHit(long) -> a
    com.google.android.apps.analytics.Hit[] peekHits() -> a
    com.google.android.apps.analytics.Hit[] peekHits(int) -> b
    com.google.android.apps.analytics.Event[] peekEvents(int,android.database.sqlite.SQLiteDatabase,int) -> a
    com.google.android.apps.analytics.Transaction getTransaction(long,android.database.sqlite.SQLiteDatabase) -> a
    com.google.android.apps.analytics.Item getItem(long,android.database.sqlite.SQLiteDatabase) -> b
    com.google.android.apps.analytics.CustomVariableBuffer getCustomVariables(long,android.database.sqlite.SQLiteDatabase) -> c
    void putEvent(com.google.android.apps.analytics.Event) -> a
    boolean endTransaction(android.database.sqlite.SQLiteDatabase) -> d
    void putEvent(com.google.android.apps.analytics.Event,android.database.sqlite.SQLiteDatabase,boolean) -> a
    void writeEventToDatabase(com.google.android.apps.analytics.Event,com.google.android.apps.analytics.Referrer,android.database.sqlite.SQLiteDatabase,boolean) -> a
    com.google.android.apps.analytics.CustomVariableBuffer getVisitorVarBuffer() -> k
    com.google.android.apps.analytics.CustomVariableBuffer getVisitorVarBuffer(android.database.sqlite.SQLiteDatabase) -> a
    int getNumStoredHits() -> b
    int getNumStoredHitsFromDb() -> l
    void loadExistingSession(android.database.sqlite.SQLiteDatabase) -> b
    void startNewVisit() -> c
    java.lang.String formatReferrer(java.lang.String) -> b
    com.google.android.apps.analytics.Referrer readCurrentReferrer(android.database.sqlite.SQLiteDatabase) -> e
    boolean setReferrerDatabase(android.database.sqlite.SQLiteDatabase,android.content.ContentValues) -> a
    boolean setReferrer(java.lang.String) -> a
    void setAnonymizeIp(boolean) -> a
    void setSampleRate(int) -> a
    java.lang.String access$000() -> d
    java.lang.String access$100() -> e
    java.lang.String access$200() -> f
    java.lang.String access$300() -> g
    java.lang.String access$400() -> h
    java.lang.String access$500() -> i
    java.lang.String access$600() -> j
    com.google.android.apps.analytics.CustomVariableBuffer access$702(com.google.android.apps.analytics.PersistentHitStore,com.google.android.apps.analytics.CustomVariableBuffer) -> a
    void access$800(com.google.android.apps.analytics.PersistentHitStore,com.google.android.apps.analytics.Event,android.database.sqlite.SQLiteDatabase,boolean) -> a
    boolean access$900(android.database.sqlite.SQLiteDatabase) -> c
com.google.android.apps.analytics.PersistentHitStore$DataBaseHelper -> com.google.android.apps.analytics.aa:
    int databaseVersion -> a
    com.google.android.apps.analytics.PersistentHitStore store -> b
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void createCustomVariableTables(android.database.sqlite.SQLiteDatabase) -> a
    void createECommerceTables(android.database.sqlite.SQLiteDatabase) -> b
    void createHitTable(android.database.sqlite.SQLiteDatabase) -> c
    void migrateEventsToHits(android.database.sqlite.SQLiteDatabase,int) -> a
    void createReferrerTable(android.database.sqlite.SQLiteDatabase) -> d
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.google.android.apps.analytics.PipelinedRequester -> com.google.android.apps.analytics.w:
    org.apache.http.impl.DefaultHttpClientConnection connection -> b
    com.google.android.apps.analytics.PipelinedRequester$Callbacks callbacks -> a
    int lastStatusCode -> c
    boolean canPipeline -> d
    org.apache.http.HttpHost host -> e
    org.apache.http.conn.scheme.SocketFactory socketFactory -> f
    void addRequest(org.apache.http.HttpEntityEnclosingRequest) -> a
    void sendRequests() -> a
    void finishedCurrentRequests() -> b
    void closeConnection() -> c
com.google.android.apps.analytics.PipelinedRequester$Callbacks -> com.google.android.apps.analytics.u:
    void pipelineModeChanged(boolean) -> a
    void serverError(int) -> a
    void requestSent() -> a
com.google.android.apps.analytics.Referrer -> com.google.android.apps.analytics.j:
    java.lang.String referrer -> a
    long timeStamp -> b
    int visit -> c
    int index -> d
    java.lang.String getReferrerString() -> a
    long getTimeStamp() -> b
    int getVisit() -> c
    int getIndex() -> d
com.google.android.apps.analytics.Transaction -> com.google.android.apps.analytics.i:
    java.lang.String orderId -> a
    java.lang.String storeName -> b
    double totalCost -> c
    double totalTax -> d
    double shippingCost -> e
    java.lang.String getOrderId() -> a
    java.lang.String getStoreName() -> b
    double getTotalCost() -> c
    double getTotalTax() -> d
    double getShippingCost() -> e
com.google.android.apps.analytics.Transaction$Builder -> com.google.android.apps.analytics.z:
    java.lang.String orderId -> a
    java.lang.String storeName -> b
    double totalCost -> c
    double totalTax -> d
    double shippingCost -> e
    com.google.android.apps.analytics.Transaction$Builder setStoreName(java.lang.String) -> a
    com.google.android.apps.analytics.Transaction$Builder setTotalTax(double) -> a
    com.google.android.apps.analytics.Transaction$Builder setShippingCost(double) -> b
    java.lang.String access$000(com.google.android.apps.analytics.Transaction$Builder) -> a
    double access$100(com.google.android.apps.analytics.Transaction$Builder) -> b
    java.lang.String access$200(com.google.android.apps.analytics.Transaction$Builder) -> c
    double access$300(com.google.android.apps.analytics.Transaction$Builder) -> d
    double access$400(com.google.android.apps.analytics.Transaction$Builder) -> e
com.google.android.apps.analytics.Utils -> com.google.android.apps.analytics.o:
    java.lang.String addQueueTimeParameter(java.lang.String,long) -> a
com.teuskim.pianokeyboard.BaseActivity -> com.teuskim.pianokeyboard.BaseActivity:
    com.google.android.apps.analytics.GoogleAnalyticsTracker mTracker -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
com.teuskim.pianokeyboard.BlackKeyView -> com.teuskim.pianokeyboard.BlackKeyView:
    int getLayoutResId() -> getLayoutResId
    int getNormalImageResId() -> getNormalImageResId
    int getPressedImageResId() -> getPressedImageResId
    int getKeyType() -> getKeyType
com.teuskim.pianokeyboard.HangulHandler -> com.teuskim.pianokeyboard.ab:
    com.teuskim.pianokeyboard.HangulHandler$State mCurrState -> a
    com.teuskim.pianokeyboard.HangulHandler$State0 mState0 -> b
    com.teuskim.pianokeyboard.HangulHandler$State1 mState1 -> c
    com.teuskim.pianokeyboard.HangulHandler$State2 mState2 -> d
    com.teuskim.pianokeyboard.HangulHandler$State3 mState3 -> e
    com.teuskim.pianokeyboard.HangulHandler$State4 mState4 -> f
    int mChosung -> g
    int mJungsung -> h
    int mJongsung -> i
    int mCurrKey -> j
    com.teuskim.pianokeyboard.PianoKeyboardService mService -> k
    java.lang.StringBuilder mComposing -> l
    java.lang.StringBuilder mHangulString -> m
    boolean mUseDupChosung -> n
    java.util.Map mKeyIntMap -> o
    boolean mIsInit -> p
    void init() -> h
    void initHangulData() -> a
    int getComposingLength() -> b
    java.lang.StringBuilder getComposing() -> c
    void handle(int) -> a
    void handleSpace() -> d
    void handleBackspace() -> e
    void commit() -> f
    int getKeyIntFromJaso(java.lang.String) -> a
    int getKeyIntFromKeyCode(int) -> b
    boolean isInit() -> g
    void setComposingText(java.lang.String) -> c
    java.lang.String separateJaso(java.lang.String) -> b
    int jongToCho(int) -> c
    int access$0(com.teuskim.pianokeyboard.HangulHandler) -> a
    void access$1(com.teuskim.pianokeyboard.HangulHandler,int) -> a
    void access$2(com.teuskim.pianokeyboard.HangulHandler,java.lang.String) -> a
    com.teuskim.pianokeyboard.HangulHandler$State1 access$3(com.teuskim.pianokeyboard.HangulHandler) -> b
    void access$4(com.teuskim.pianokeyboard.HangulHandler,com.teuskim.pianokeyboard.HangulHandler$State) -> a
    void access$5(com.teuskim.pianokeyboard.HangulHandler,int) -> b
    com.teuskim.pianokeyboard.HangulHandler$State2 access$6(com.teuskim.pianokeyboard.HangulHandler) -> c
    java.lang.StringBuilder access$7(com.teuskim.pianokeyboard.HangulHandler) -> d
    void access$8(com.teuskim.pianokeyboard.HangulHandler,java.lang.String) -> b
    com.teuskim.pianokeyboard.PianoKeyboardService access$9(com.teuskim.pianokeyboard.HangulHandler) -> e
    void access$10(com.teuskim.pianokeyboard.HangulHandler) -> f
    int access$11(com.teuskim.pianokeyboard.HangulHandler) -> g
    boolean access$12(com.teuskim.pianokeyboard.HangulHandler) -> h
    void access$13(com.teuskim.pianokeyboard.HangulHandler,java.lang.String) -> c
    com.teuskim.pianokeyboard.HangulHandler$State0 access$14(com.teuskim.pianokeyboard.HangulHandler) -> i
    int access$15(com.teuskim.pianokeyboard.HangulHandler) -> j
    com.teuskim.pianokeyboard.HangulHandler$State3 access$16(com.teuskim.pianokeyboard.HangulHandler) -> k
    void access$17(com.teuskim.pianokeyboard.HangulHandler,int) -> c
    int access$18(com.teuskim.pianokeyboard.HangulHandler) -> l
    com.teuskim.pianokeyboard.HangulHandler$State4 access$19(com.teuskim.pianokeyboard.HangulHandler) -> m
    void access$20(com.teuskim.pianokeyboard.HangulHandler,int) -> d
    int access$21(com.teuskim.pianokeyboard.HangulHandler,int) -> e
com.teuskim.pianokeyboard.HangulHandler$State -> com.teuskim.pianokeyboard.ag:
    int[] sJasoArr -> a
    int[] sJungsungArr -> b
    int[] sJongsungArr -> c
    java.util.Map sDupJasoMap -> j
    java.util.Map sChangeChosungMap -> d
    java.util.Map sDupChosungMap -> e
    java.util.Map sDupJungsungMap -> f
    java.util.Map sDupJongsungMap -> g
    java.util.Map sPostDupChosungMap -> h
    java.util.Map sDupJongToDupChoMap -> i
    void jaum() -> a
    void moum() -> b
    boolean back() -> c
com.teuskim.pianokeyboard.HangulHandler$State0 -> com.teuskim.pianokeyboard.q:
    com.teuskim.pianokeyboard.HangulHandler this$0 -> j
    void jaum() -> a
    void moum() -> b
    boolean back() -> c
com.teuskim.pianokeyboard.HangulHandler$State1 -> com.teuskim.pianokeyboard.s:
    com.teuskim.pianokeyboard.HangulHandler this$0 -> j
    void jaum() -> a
    void moum() -> b
    boolean back() -> c
com.teuskim.pianokeyboard.HangulHandler$State2 -> com.teuskim.pianokeyboard.ao:
    com.teuskim.pianokeyboard.HangulHandler this$0 -> j
    void jaum() -> a
    void moum() -> b
    boolean back() -> c
com.teuskim.pianokeyboard.HangulHandler$State3 -> com.teuskim.pianokeyboard.an:
    com.teuskim.pianokeyboard.HangulHandler this$0 -> j
    void jaum() -> a
    void moum() -> b
    boolean back() -> c
com.teuskim.pianokeyboard.HangulHandler$State4 -> com.teuskim.pianokeyboard.ap:
    boolean mWillSplitJongsung -> j
    com.teuskim.pianokeyboard.HangulHandler this$0 -> k
    void jaum() -> a
    void moum() -> b
    boolean back() -> c
    int dupJongToKey(int) -> a
com.teuskim.pianokeyboard.KeyView -> com.teuskim.pianokeyboard.KeyView:
    int KEY_TYPE_WHITE -> KEY_TYPE_WHITE
    int KEY_TYPE_BLACK -> KEY_TYPE_BLACK
    android.widget.ImageView mImageView -> mImageView
    android.widget.TextView mTextView -> mTextView
    int getLayoutResId() -> getLayoutResId
    int getNormalImageResId() -> getNormalImageResId
    int getPressedImageResId() -> getPressedImageResId
    int getKeyType() -> getKeyType
    void init(android.content.Context) -> init
    void alignCenter() -> alignCenter
    void paddingLeft(int) -> paddingLeft
    void setTextSize(int) -> setTextSize
    void setPressed(boolean) -> setPressed
    void setText(java.lang.String) -> setText
com.teuskim.pianokeyboard.MainActivity -> com.teuskim.pianokeyboard.MainActivity:
    android.widget.Button mBtnPlayPiano -> b
    android.widget.TextView mTxtAboutButton -> c
    android.widget.Button mBtnChangeSettings -> d
    android.widget.EditText mInputTest -> e
    android.view.inputmethod.InputMethodManager mImm -> f
    int mCurrState -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void makeSettingButton() -> a
    void onClick(android.view.View) -> onClick
com.teuskim.pianokeyboard.PianoKeyboard -> com.teuskim.pianokeyboard.p:
    android.content.Context mContext -> a
    int mXmlLayoutResId -> b
    java.util.List mKeyList -> c
    boolean mIsCustom -> d
    int mMaxLabelSize -> e
    void loadKeyboard() -> b
    void loadKeyboard(java.util.Map) -> a
    java.util.List getKeyList() -> a
com.teuskim.pianokeyboard.PianoKeyboard$Key -> com.teuskim.pianokeyboard.o:
    int mKeyCode -> a
    java.lang.String mKeyLabel -> b
    int mKeyIcon -> c
    boolean mIsCustom -> d
    java.lang.String mKeyData -> e
    int getKeyCode() -> a
    java.lang.String getKeyLabel() -> b
    boolean isCustom() -> c
    java.lang.String getKeyData() -> d
com.teuskim.pianokeyboard.PianoKeyboardDb -> com.teuskim.pianokeyboard.g:
    com.teuskim.pianokeyboard.PianoKeyboardDb sInstance -> a
    android.content.Context mContext -> b
    android.database.sqlite.SQLiteDatabase mDb -> c
    com.teuskim.pianokeyboard.PianoKeyboardDb getInstance(android.content.Context) -> a
    java.lang.String getKeyboardName(int) -> a
    boolean isSoundOffIfSilent() -> a
    boolean updateIsSoundOffIfSilent(boolean) -> a
    int getSoundMode() -> b
    boolean updateSoundMode(int) -> b
    int getKeyboardPosition() -> c
    boolean updateKeyboardPosition(int) -> c
    java.util.List getKeySetList() -> d
    boolean updateKeySetChecked(int,boolean) -> a
    java.util.List getCustomKeySetList() -> e
    java.lang.String getCustomKeySetName(int) -> d
    java.lang.String getCustomKeySetShowYN(int) -> e
    boolean updateCustomKeySetShowYN(int,java.lang.String) -> a
    java.util.List getCustomKeySetDataList(int) -> f
    boolean insertCustomKeyset(java.lang.String,java.lang.String,java.util.Map) -> a
    boolean deleteCustomKeyset(long) -> a
    com.teuskim.pianokeyboard.PianoKeyboardDb$Word getWord(java.lang.String) -> c
    boolean insertOrUpdateWord(java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String) -> a
    com.teuskim.pianokeyboard.PianoKeyboardDb$NextWordGroup getNextWordGroup(java.lang.String,java.lang.String) -> c
    boolean insertOrUpdateNextWordGroup(java.lang.String,java.lang.String) -> a
    java.util.List getNextWordList(java.lang.String,java.lang.String) -> b
    java.util.List getWordListByAttr(java.lang.String,int) -> a
    java.util.List getWordListByUseCnt(java.lang.String) -> a
    java.util.List getWordListByUseTime(java.lang.String) -> b
    com.teuskim.pianokeyboard.PianoKeyboardDb$MyInfo getMyInfo() -> f
    double getUpdatedWeight(double,java.lang.String) -> a
    boolean updateWeight(int,int,int) -> a
com.teuskim.pianokeyboard.PianoKeyboardDb$CustomKeyset -> com.teuskim.pianokeyboard.k:
    int mId -> a
    java.lang.String mName -> b
    java.lang.String mShowYN -> c
com.teuskim.pianokeyboard.PianoKeyboardDb$CustomKeysetData -> com.teuskim.pianokeyboard.v:
    int mId -> a
    int mCustomKeysetId -> b
    int mPosition -> c
    java.lang.String mData -> d
com.teuskim.pianokeyboard.PianoKeyboardDb$DbOpenHelper -> com.teuskim.pianokeyboard.i:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void updateVer1to2(android.database.sqlite.SQLiteDatabase) -> a
com.teuskim.pianokeyboard.PianoKeyboardDb$KeySet -> com.teuskim.pianokeyboard.ai:
    int mId -> a
    int mType -> b
    java.lang.String mShowYN -> c
    void onCreate(android.database.sqlite.SQLiteDatabase) -> a
    android.content.ContentValues getContentValues(int,java.lang.String) -> a
com.teuskim.pianokeyboard.PianoKeyboardDb$MyInfo -> com.teuskim.pianokeyboard.c:
    int mUseHistory -> a
    int mSoundMode -> b
    int mKeyboardPosition -> c
    int mIsSoundoffIfSilent -> d
    int mUseCntTotalWeight -> e
    int mUseCntNWeight -> f
    int mUseCntXxxWeight -> g
    int mAvailablePeriod -> h
com.teuskim.pianokeyboard.PianoKeyboardDb$NextWordGroup -> com.teuskim.pianokeyboard.e:
    int mUseCnt -> a
    java.lang.String mWord -> b
    java.lang.String mNextWord -> c
com.teuskim.pianokeyboard.PianoKeyboardDb$Word -> com.teuskim.pianokeyboard.n:
    java.lang.String mWord -> a
    java.lang.String mComposition -> b
    java.lang.String mUpdDt -> c
    java.lang.String mCrtDt -> d
    int mUseCntTotal -> e
    int mUseCnt0 -> f
    int mUseCnt4 -> g
    int mUseCnt8 -> h
    int mUseCnt12 -> i
    int mUseCnt16 -> j
    int mUseCnt20 -> k
    int mUseCntNormal -> l
    int mUseCntEmailAddress -> m
    int mUseCntEmailSubject -> n
    int mUseCntUri -> o
    int mUseCntPersonName -> p
    int mUseCntPostalAddress -> q
    int mUseCntNumber -> r
    int mWordId -> s
com.teuskim.pianokeyboard.PianoKeyboardService -> com.teuskim.pianokeyboard.PianoKeyboardService:
    com.teuskim.pianokeyboard.PianoSoundManager mSoundManager -> a
    com.teuskim.pianokeyboard.PianoKeyboardView mKeyboardView -> b
    com.teuskim.pianokeyboard.PianoKeyboard mEnglishKeyboard -> c
    com.teuskim.pianokeyboard.PianoKeyboard mEnglishKeyboardShift -> d
    com.teuskim.pianokeyboard.PianoKeyboard mHangulKeyboard -> e
    com.teuskim.pianokeyboard.PianoKeyboard mHangulKeyboardShift -> f
    com.teuskim.pianokeyboard.PianoKeyboard mSymbolKeyboard -> g
    com.teuskim.pianokeyboard.PianoKeyboard mSymbolKeyboardShift -> h
    java.lang.StringBuilder mComposing -> i
    android.widget.Button mBtnChangeKeyboard -> j
    android.widget.Button mBtnBackspace -> k
    android.widget.Button mBtnSpace -> l
    android.widget.Button mBtnEnter -> m
    android.widget.Button mBtnShift -> n
    boolean mIsPressedBtnShift -> o
    android.widget.Button mBtnRepeat -> p
    android.widget.Button mBtnSettings -> q
    com.teuskim.pianokeyboard.HangulHandler mHangulHandler -> r
    java.util.List mKeyboardList -> s
    java.util.Map mNameMap -> t
    android.os.Handler mHandler -> u
    java.lang.String mRepeatedString -> v
    com.teuskim.pianokeyboard.PianoKeyboardDb mDb -> w
    android.widget.LinearLayout mWordListLayout -> x
    com.teuskim.pianokeyboard.PianoKeyboardService$WordListTask mWordListTask -> y
    java.lang.String mInputString -> z
    int mCurrTypeTextVariation -> A
    int mKeyCodeEnter -> B
    boolean mIsInserting -> C
    com.google.android.apps.analytics.GoogleAnalyticsTracker mTracker -> D
    com.teuskim.pianokeyboard.PianoKeyboardService$WordListRunnable mWordListRunnable -> E
    void onCreate() -> onCreate
    void onInitializeInterface() -> onInitializeInterface
    java.lang.String shortNameIfNeeded(java.lang.String) -> a
    android.view.View onCreateInputView() -> onCreateInputView
    void onStartInputView(android.view.inputmethod.EditorInfo,boolean) -> onStartInputView
    void onFinishInputView(boolean) -> onFinishInputView
    void onStartInput(android.view.inputmethod.EditorInfo,boolean) -> onStartInput
    void onUpdateSelection(int,int,int,int,int,int) -> onUpdateSelection
    void onFinishInput() -> onFinishInput
    void finishInput() -> c
    void onDestroy() -> onDestroy
    void keyDownUp(int) -> a
    void onClick(android.view.View) -> onClick
    void onTouchDown(int,int,com.teuskim.pianokeyboard.PianoKeyboard$Key) -> a
    void onTouchUp() -> a
    void changeSpacebarText() -> d
    void setComposingText(java.lang.CharSequence,int) -> a
    void commitText(java.lang.CharSequence,int) -> c
    void commitHangul(java.lang.CharSequence,int) -> b
    boolean isHangulInput() -> e
    void handleShift() -> f
    void wordInsert(java.lang.String) -> b
    int getCharType(char) -> a
    void showWordList() -> b
    com.teuskim.pianokeyboard.HangulHandler access$0(com.teuskim.pianokeyboard.PianoKeyboardService) -> a
    android.os.Handler access$1(com.teuskim.pianokeyboard.PianoKeyboardService) -> b
    java.lang.String access$2(com.teuskim.pianokeyboard.PianoKeyboardService) -> c
    char access$3(com.teuskim.pianokeyboard.PianoKeyboardService) -> d
    int access$4(com.teuskim.pianokeyboard.PianoKeyboardService,char) -> a
    android.widget.LinearLayout access$5(com.teuskim.pianokeyboard.PianoKeyboardService) -> e
    java.lang.StringBuilder access$6(com.teuskim.pianokeyboard.PianoKeyboardService) -> f
    void access$7(com.teuskim.pianokeyboard.PianoKeyboardService,java.lang.CharSequence,int) -> a
    void access$8(com.teuskim.pianokeyboard.PianoKeyboardService) -> g
    java.util.List access$9(com.teuskim.pianokeyboard.PianoKeyboardService,java.lang.String) -> a
    com.teuskim.pianokeyboard.PianoKeyboardDb access$10(com.teuskim.pianokeyboard.PianoKeyboardService) -> h
    int access$11(com.teuskim.pianokeyboard.PianoKeyboardService) -> i
    void access$12(com.teuskim.pianokeyboard.PianoKeyboardService,java.lang.String) -> b
    void access$13(com.teuskim.pianokeyboard.PianoKeyboardService,boolean) -> a
    com.teuskim.pianokeyboard.PianoKeyboardService$WordListTask access$14(com.teuskim.pianokeyboard.PianoKeyboardService) -> j
    void access$15(com.teuskim.pianokeyboard.PianoKeyboardService,com.teuskim.pianokeyboard.PianoKeyboardService$WordListTask) -> a
com.teuskim.pianokeyboard.PianoKeyboardService$1 -> com.teuskim.pianokeyboard.j:
    com.teuskim.pianokeyboard.PianoKeyboardService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener -> com.teuskim.pianokeyboard.u:
    boolean mIsDown -> a
    android.view.View mView -> b
    android.view.View$OnClickListener mListener -> c
    java.lang.Runnable mRepeatRunnable -> d
    com.teuskim.pianokeyboard.PianoKeyboardService this$0 -> e
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    android.view.View$OnClickListener access$0(com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener) -> a
    android.view.View access$1(com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener) -> b
    void access$2(com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener) -> c
com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener$1 -> com.teuskim.pianokeyboard.a:
    com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener this$1 -> a
    void run() -> run
com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener$2 -> com.teuskim.pianokeyboard.m:
    com.teuskim.pianokeyboard.PianoKeyboardService$RepeatListener this$1 -> a
    void run() -> run
com.teuskim.pianokeyboard.PianoKeyboardService$WordInsertTask -> com.teuskim.pianokeyboard.aj:
    com.teuskim.pianokeyboard.PianoKeyboardService this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.teuskim.pianokeyboard.PianoKeyboardService$WordListRunnable -> com.teuskim.pianokeyboard.aq:
    com.teuskim.pianokeyboard.PianoKeyboardService this$0 -> a
    void run() -> run
com.teuskim.pianokeyboard.PianoKeyboardService$WordListTask -> com.teuskim.pianokeyboard.l:
    com.teuskim.pianokeyboard.PianoKeyboardService this$0 -> a
    java.util.List mergeWordList(java.util.List,java.util.List,java.util.List,java.util.List) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.teuskim.pianokeyboard.PianoKeyboardService$WordListTask$1 -> com.teuskim.pianokeyboard.x:
    com.teuskim.pianokeyboard.PianoKeyboardService$WordListTask this$1 -> a
    java.lang.String val$word -> b
    void onClick(android.view.View) -> onClick
com.teuskim.pianokeyboard.PianoKeyboardView -> com.teuskim.pianokeyboard.PianoKeyboardView:
    android.content.Context mContext -> mContext
    java.util.List mWhiteKeyViewList -> mWhiteKeyViewList
    java.util.List mBlackKeyViewList -> mBlackKeyViewList
    java.util.Map mPressedViewMap -> mPressedViewMap
    int mWhiteWidth -> mWhiteWidth
    int mBlackWidth -> mBlackWidth
    int mSmallGap -> mSmallGap
    int mBigGap -> mBigGap
    com.teuskim.pianokeyboard.PianoKeyboardView$OnKeyboardActionListener mKeyboardActionListener -> mKeyboardActionListener
    com.teuskim.pianokeyboard.PianoKeyboard mKeyboard -> mKeyboard
    java.util.Map mKeyMap -> mKeyMap
    boolean mIsRegisterMode -> mIsRegisterMode
    int mTextSize -> mTextSize
    void init(android.content.Context) -> init
    void fillKeyViewList(java.util.List,android.widget.LinearLayout) -> fillKeyViewList
    void setKeyBlackLayoutParams(com.teuskim.pianokeyboard.KeyView,int,int,int) -> setKeyBlackLayoutParams
    void setIsRegisterMode(boolean) -> setIsRegisterMode
    void adjustLayoutParams(double,double,double) -> adjustLayoutParams
    void setOnKeyboardActionListener(com.teuskim.pianokeyboard.PianoKeyboardView$OnKeyboardActionListener) -> setOnKeyboardActionListener
    void setTextSize(int) -> setTextSize
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void actionDown(int,android.view.MotionEvent) -> actionDown
    void actionMove(android.view.MotionEvent) -> actionMove
    void actionUp(int,android.view.MotionEvent) -> actionUp
    int getPointerIndex(int) -> getPointerIndex
    int getKeyIndexByXY(float,float) -> getKeyIndexByXY
    com.teuskim.pianokeyboard.KeyView getKeyViewByXY(float,int) -> getKeyViewByXY
    void setKeyboard(com.teuskim.pianokeyboard.PianoKeyboard) -> setKeyboard
    com.teuskim.pianokeyboard.PianoKeyboard getKeyboard() -> getKeyboard
com.teuskim.pianokeyboard.PianoKeyboardView$OnKeyboardActionListener -> com.teuskim.pianokeyboard.b:
    void onTouchDown(int,int,com.teuskim.pianokeyboard.PianoKeyboard$Key) -> a
    void onTouchUp() -> a
com.teuskim.pianokeyboard.PianoPlayActivity -> com.teuskim.pianokeyboard.PianoPlayActivity:
    com.teuskim.pianokeyboard.PianoKeyboardView mKeyboardView -> b
    com.teuskim.pianokeyboard.PianoSoundManager mSoundManager -> c
    android.view.animation.Animation mNoteAni1 -> d
    android.view.animation.Animation mNoteAni2 -> e
    android.view.animation.Animation mNoteAni3 -> f
    android.view.animation.Animation mNoteAni4 -> g
    android.widget.ImageView mNote1 -> h
    android.widget.ImageView mNote2 -> i
    android.widget.ImageView mNote3 -> j
    android.widget.ImageView mNote4 -> k
    android.widget.Button mBtnPlayLog -> l
    java.util.List mNoteResList -> m
    int mNoteIndex -> n
    java.util.List mPlayLogs -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onTouchDown(int,int,com.teuskim.pianokeyboard.PianoKeyboard$Key) -> a
    void onTouchUp() -> a
    void noteAnimation(android.view.animation.Animation,android.widget.ImageView) -> a
    void access$0(com.teuskim.pianokeyboard.PianoPlayActivity,com.teuskim.pianokeyboard.PianoSoundManager) -> a
    java.util.List access$1(com.teuskim.pianokeyboard.PianoPlayActivity) -> a
com.teuskim.pianokeyboard.PianoPlayActivity$1 -> com.teuskim.pianokeyboard.ak:
    com.teuskim.pianokeyboard.PianoPlayActivity this$0 -> a
    android.widget.ImageView val$note -> b
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.teuskim.pianokeyboard.PianoPlayActivity$2 -> com.teuskim.pianokeyboard.am:
    com.teuskim.pianokeyboard.PianoPlayActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.teuskim.pianokeyboard.PianoPlayActivity$3 -> com.teuskim.pianokeyboard.al:
    com.teuskim.pianokeyboard.PianoPlayActivity this$0 -> a
    java.lang.String val$message -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.teuskim.pianokeyboard.PianoPlayActivity$PlayLog -> com.teuskim.pianokeyboard.z:
    java.lang.String mCode -> a
    long mTime -> b
    com.teuskim.pianokeyboard.PianoPlayActivity this$0 -> c
com.teuskim.pianokeyboard.PianoPlayActivity$SoundInitTask -> com.teuskim.pianokeyboard.h:
    com.teuskim.pianokeyboard.PianoPlayActivity this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.teuskim.pianokeyboard.PianoSoundManager -> com.teuskim.pianokeyboard.f:
    com.teuskim.pianokeyboard.PianoSoundManager sInstance -> a
    int mSoundMode -> b
    com.teuskim.pianokeyboard.PianoSoundManager$ReservedPlayer mReservedPlayer -> c
    android.media.AudioManager mAudioManager -> d
    boolean mIsSoundOffIfSilent -> e
    com.teuskim.pianokeyboard.PianoSoundManager getInstance(android.content.Context) -> b
    void setSoundMode(int) -> b
    void setIsSoundOffIfSilent(boolean) -> a
    void playSound(int) -> a
    void superPlaySound(int) -> c
    void playSoundFromPlayer(int) -> d
    void updateLastPlayTime() -> a
    void resetLastPlayTime() -> b
com.teuskim.pianokeyboard.PianoSoundManager$ReservedPlayer -> com.teuskim.pianokeyboard.r:
    java.util.Map mMap -> a
    long mLastTime -> b
    int mLastIndex -> c
    java.lang.String mCurrStr -> d
    com.teuskim.pianokeyboard.PianoSoundManager this$0 -> e
    void playSound(int) -> a
    void setLastTime(long) -> a
com.teuskim.pianokeyboard.RecommendWord -> com.teuskim.pianokeyboard.t:
    int mWordId -> a
    java.lang.String mWord -> b
    double mUseCntNext -> c
    double mUseCntNextSum -> d
    double mUseCntXxx -> e
    double mUseCntXxxSum -> f
    double mUseCntTotal -> g
    double mUseCntTotalSum -> h
    double mUseCntN -> i
    double mUseCntNSum -> j
    double mPoint -> k
    java.lang.String mUpdDt -> l
    long mDiffTime -> m
    int compareTo(java.lang.Object) -> compareTo
com.teuskim.pianokeyboard.RegisterCustomActivity -> com.teuskim.pianokeyboard.RegisterCustomActivity:
    android.widget.EditText mNameCustom -> b
    com.teuskim.pianokeyboard.PianoKeyboardView mKeyboardView -> c
    android.widget.LinearLayout mKeymapListView -> d
    android.widget.Button mBtnRecommend -> e
    android.widget.Button mBtnReset -> f
    java.util.Map mKeymap -> g
    int mPressedIndex -> h
    com.teuskim.pianokeyboard.PianoKeyboard mPianoKeyboard -> i
    int mCustomId -> j
    com.teuskim.pianokeyboard.PianoKeyboardDb mDb -> k
    android.view.LayoutInflater mInflater -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onTouchDown(int,int,com.teuskim.pianokeyboard.PianoKeyboard$Key) -> a
    void onTouchUp() -> a
    void refreshKeymap() -> b
    void addCustomSubtitle(int) -> a
    int access$0(com.teuskim.pianokeyboard.RegisterCustomActivity) -> a
    com.teuskim.pianokeyboard.PianoKeyboardDb access$1(com.teuskim.pianokeyboard.RegisterCustomActivity) -> b
    java.util.Map access$2(com.teuskim.pianokeyboard.RegisterCustomActivity) -> c
    int access$3(com.teuskim.pianokeyboard.RegisterCustomActivity) -> d
    void access$4(com.teuskim.pianokeyboard.RegisterCustomActivity) -> e
    android.widget.EditText access$5(com.teuskim.pianokeyboard.RegisterCustomActivity) -> f
com.teuskim.pianokeyboard.RegisterCustomActivity$1 -> com.teuskim.pianokeyboard.y:
    com.teuskim.pianokeyboard.RegisterCustomActivity this$0 -> a
    android.widget.EditText val$edittext -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.teuskim.pianokeyboard.RegisterCustomActivity$2 -> com.teuskim.pianokeyboard.w:
    com.teuskim.pianokeyboard.RegisterCustomActivity this$0 -> a
    int val$index -> b
    void onClick(android.view.View) -> onClick
com.teuskim.pianokeyboard.RegisterCustomActivity$3 -> com.teuskim.pianokeyboard.aa:
    com.teuskim.pianokeyboard.RegisterCustomActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.teuskim.pianokeyboard.RegisterCustomActivity$SaveTask -> com.teuskim.pianokeyboard.ar:
    com.teuskim.pianokeyboard.RegisterCustomActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.teuskim.pianokeyboard.SettingActivity -> com.teuskim.pianokeyboard.SettingActivity:
    android.widget.LinearLayout mListViewKeyboard -> b
    android.widget.LinearLayout mListCustom -> c
    android.widget.RadioGroup mRadiobtnSound -> d
    android.widget.RadioButton mRadioBtnSoundRecommended -> e
    android.widget.RadioButton mRadioBtnSoundOriginal -> f
    android.widget.RadioButton mRadioBtnSoundNone -> g
    android.widget.CheckBox mCheckboxNoSound -> h
    android.view.LayoutInflater mInflater -> i
    com.teuskim.pianokeyboard.PianoKeyboardDb mDb -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void refreshCustomList() -> a
    com.teuskim.pianokeyboard.PianoKeyboardDb access$0(com.teuskim.pianokeyboard.SettingActivity) -> a
    void access$1(com.teuskim.pianokeyboard.SettingActivity,long) -> a
    void access$2(com.teuskim.pianokeyboard.SettingActivity) -> b
com.teuskim.pianokeyboard.SettingActivity$1 -> com.teuskim.pianokeyboard.ad:
    com.teuskim.pianokeyboard.SettingActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.teuskim.pianokeyboard.SettingActivity$2 -> com.teuskim.pianokeyboard.ac:
    com.teuskim.pianokeyboard.SettingActivity this$0 -> a
    com.teuskim.pianokeyboard.PianoKeyboardDb$KeySet val$item -> b
    void onClick(android.view.View) -> onClick
com.teuskim.pianokeyboard.SettingActivity$3 -> com.teuskim.pianokeyboard.af:
    com.teuskim.pianokeyboard.SettingActivity this$0 -> a
    com.teuskim.pianokeyboard.PianoKeyboardDb$CustomKeyset val$item -> b
    void onClick(android.view.View) -> onClick
com.teuskim.pianokeyboard.SettingActivity$4 -> com.teuskim.pianokeyboard.ae:
    com.teuskim.pianokeyboard.SettingActivity this$0 -> a
    android.widget.CheckBox val$checkbox -> b
    com.teuskim.pianokeyboard.PianoKeyboardDb$CustomKeyset val$item -> c
    void onClick(android.view.View) -> onClick
com.teuskim.pianokeyboard.SettingActivity$5 -> com.teuskim.pianokeyboard.ah:
    com.teuskim.pianokeyboard.SettingActivity this$0 -> a
    long val$itemId -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.teuskim.pianokeyboard.SoundManager -> com.teuskim.pianokeyboard.d:
    android.media.SoundPool mSoundPool -> a
    java.util.HashMap mSoundPoolMap -> b
    android.media.AudioManager mAudioManager -> c
    android.content.Context mContext -> d
    void initSounds(android.content.Context) -> a
    void addSound(int,int) -> a
    void playSound(int) -> a
com.teuskim.pianokeyboard.WhiteKeyView -> com.teuskim.pianokeyboard.WhiteKeyView:
    int getLayoutResId() -> getLayoutResId
    int getNormalImageResId() -> getNormalImageResId
    int getPressedImageResId() -> getPressedImageResId
    int getKeyType() -> getKeyType
